
import root from '../root.svelte';
import { set_building, set_prerendering } from '__sveltekit/environment';
import { set_assets } from '__sveltekit/paths';
import { set_manifest, set_read_implementation } from '__sveltekit/server';
import { set_private_env, set_public_env, set_safe_public_env } from '../../../node_modules/@sveltejs/kit/src/runtime/shared-server.js';

export const options = {
	app_template_contains_nonce: false,
	csp: {"mode":"auto","directives":{"upgrade-insecure-requests":false,"block-all-mixed-content":false},"reportOnly":{"upgrade-insecure-requests":false,"block-all-mixed-content":false}},
	csrf_check_origin: true,
	embedded: false,
	env_public_prefix: 'PUBLIC_',
	env_private_prefix: '',
	hash_routing: false,
	hooks: null, // added lazily, via `get_hooks`
	preload_strategy: "modulepreload",
	root,
	service_worker: false,
	templates: {
		app: ({ head, body, assets, nonce, env }) => "<!doctype html>\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<meta name=\"description\" content=\"Timeline to the Future - A Visual Exploration\" />\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n\t\t\n\t\t<!-- \n\t\t// ===================================================================\n\t\t// FONT IMPORTS\n\t\t// Import Google Fonts for typography throughout the application\n\t\t// ===================================================================\n\t\t-->\n\t\t<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n\t\t<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n\t\t<link href=\"https://fonts.googleapis.com/css2?family=Nunito:ital,wght@0,200..1000;1,200..1000&display=swap\" rel=\"stylesheet\">\n\t\t" + head + "\n\t\t\n\t\t<!-- \n\t\t// ===================================================================\n\t\t// LOADING STATES\n\t\t// Styling to prevent Flash of Unstyled Content (FOUC) during load\n\t\t// ===================================================================\n\t\t-->\n\t\t<style>\n\t\t\t/* Initially hide content that will be replaced by Svelte */\n\t\t\t[data-mount=\"true\"] {\n\t\t\t\tdisplay: none;\n\t\t\t}\n\t\t\t\n\t\t\t/* Initial page loading overlay */\n\t\t\t.app-loading {\n\t\t\t\tposition: fixed;\n\t\t\t\ttop: 0;\n\t\t\t\tleft: 0;\n\t\t\t\twidth: 100%;\n\t\t\t\theight: 100%;\n\t\t\t\tbackground-color: #000000;\n\t\t\t\tdisplay: flex;\n\t\t\t\tjustify-content: center;\n\t\t\t\talign-items: center;\n\t\t\t\tz-index: 9999;\n\t\t\t\ttransition: opacity 0.5s ease-out;\n\t\t\t}\n\t\t\t\n\t\t\t.app-loading.hide {\n\t\t\t\topacity: 0;\n\t\t\t\tpointer-events: none;\n\t\t\t}\n\t\t\t\n\t\t\t.loading-spinner {\n\t\t\t\twidth: 50px;\n\t\t\t\theight: 50px;\n\t\t\t\tborder: 5px solid #f3f3f3;\n\t\t\t\tborder-top: 5px solid #333;\n\t\t\t\tborder-radius: 50%;\n\t\t\t\tanimation: spin 1s linear infinite;\n\t\t\t}\n\t\t\t\n\t\t\t@keyframes spin {\n\t\t\t\t0% { transform: rotate(0deg); }\n\t\t\t\t100% { transform: rotate(360deg); }\n\t\t\t}\n\t\t\t\n\t\t\t/* Hide all lorem ipsum paragraphs until app is ready */\n\t\t\tbody > p {\n\t\t\t\tdisplay: none;\n\t\t\t}\n\t\t</style>\n\t\t<title>Timeline to the Future</title>\n\t\t\n\t\t<!-- \n\t\t// ===================================================================\n\t\t// DATAWRAPPER SUPPORT\n\t\t// Support for Datawrapper responsive iframe resizing\n\t\t// ===================================================================\n\t\t-->\n\t\t<script type=\"text/javascript\">\n\t\t\t// Datawrapper responsive iframe height adjustment\n\t\t\t!function(){\"use strict\";window.addEventListener(\"message\",(function(a){if(void 0!==a.data[\"datawrapper-height\"]){var e=document.querySelectorAll(\"iframe\");for(var t in a.data[\"datawrapper-height\"])for(var r,i=0;r=e[i];i++)if(r.contentWindow===a.source){var d=a.data[\"datawrapper-height\"][t]+\"px\";r.style.height=d}}}))}();\n\t\t</script>\n\t</head>\n\t<body>\n\t\t<!-- \n\t\t// ===================================================================\n\t\t// LOADING OVERLAY\n\t\t// Initial loading state before content is rendered\n\t\t// ===================================================================\n\t\t-->\n\t\t<div class=\"app-loading\" id=\"appLoading\">\n\t\t\t<div class=\"loading-spinner\"></div>\n\t\t</div>\n\t\t\n\t\t<!-- \n\t\t// ===================================================================\n\t\t// SVELTE APP MOUNT POINT\n\t\t// Main container where SvelteKit mounts the application\n\t\t// ===================================================================\n\t\t-->\n\t\t<div id=\"svelteApp\">" + body + "</div>\n\t\t\n\t\t<!-- \n\t\t// ===================================================================\n\t\t// SCROLLYTELLER MOUNT POINTS\n\t\t// Anchors and markers for scrollytelling functionality\n\t\t// ===================================================================\n\t\t-->\n\t\t<div data-mount=\"true\" id=\"scrollytellerNAMEtest\" data-component=\"Anchor\"></div>\n\n\t\t<div data-mount=\"true\" id=\"markNUMBER1ALIGNright\"></div>\n\t\t<p>\n\t\t\tOur journey begins with the core technologies that will define the next century. These foundations are already taking shape, evolving from experimental concepts to practical applications that transform industries and daily life.\n\t\t</p>\n\n\t\t<div data-mount=\"true\" id=\"markNUMBER2ALIGN\"></div>\n\t\t<p>\n\t\t\tThe digital revolution has transformed how we work, learn, and connect. But we're only at the beginning of this transformation, with exponential growth in computational capabilities unlocking new possibilities across every domain.\n\t\t</p>\n\n\t\t<div data-mount=\"true\" id=\"markNUMBER3ALIGNleft\"></div>\n\t\t<p>\n\t\t\tGlobal connectivity breaks down traditional barriers, enabling collaboration and innovation at unprecedented scales. Communities form around shared interests rather than geography, creating new social structures and cultural patterns.\n\t\t</p>\n\n\t\t<div data-mount=\"true\" id=\"markNUMBER4ALIGNright\"></div>\n\t\t<p>\n\t\t\tArtificial intelligence evolves from simple automation to creative partnership. These systems learn not just to follow instructions but to understand context, adapt to changing conditions, and propose novel solutions to complex problems.\n\t\t</p>\n\t\t<p>\n\t\t\tThe integration of AI with human intelligence creates complementary capabilities, where machines handle routine analysis while humans provide judgment, creativity, and ethical guidance. This symbiotic relationship transforms how knowledge work is performed.\n\t\t</p>\n\t\t<p>\n\t\t\tAs these systems become more capable, new questions arise about agency, responsibility, and the nature of intelligence itself. The lines between tool and collaborator begin to blur, challenging our understanding of what it means to create.\n\t\t</p>\n\n\t\t<div data-mount=\"true\" id=\"markNUMBER5ALIGN\"></div>\n\t\t<p>\n\t\t\tEnvironmental imperatives redirect technological development toward sustainable solutions. Renewable energy, circular materials, and regenerative systems become the focus of innovation as we align technological progress with planetary health.\n\t\t</p>\n\n\t\t<div data-mount=\"true\" id=\"markNUMBER6ALIGNleft\"></div>\n\t\t<p>\n\t\t\tSpace exploration enters a new era as reduced launch costs and advanced robotics make off-world research and development increasingly viable. The resources and perspective of space offer new solutions to terrestrial challenges.\n\t\t</p>\n\t\t\n\t\t<p>\n\t\t\tAs we establish a permanent human presence beyond Earth, new questions emerge about governance, resource allocation, and our relationship with environments beyond our home planet. These explorations reshape our understanding of humanity's place in the cosmos.\n\t\t</p>\n\n\t\t<div data-mount=\"true\" id=\"markNUMBER7ALIGN\"></div>\n\t\t<p>\n\t\t\tThe convergence of biotechnology, digital systems, and physical engineering creates unprecedented capabilities. The boundaries between these domains dissolve, enabling integrated solutions that address complex challenges through multiple approaches simultaneously.\n\t\t</p>\n\t\t<div data-mount=\"true\" id=\"endscrollyteller\"></div>\n\t\t\n\t\t<!-- \n\t\t// ===================================================================\n\t\t// LOADING SCREEN REMOVAL\n\t\t// Script to hide loading overlay once content is loaded\n\t\t// ===================================================================\n\t\t-->\n\t\t<script>\n\t\t\t// Remove loading screen once the app is mounted\n\t\t\tdocument.addEventListener('DOMContentLoaded', function() {\n\t\t\t\t// Short timeout to ensure Svelte has had time to initialize\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\tvar loadingScreen = document.getElementById('appLoading');\n\t\t\t\t\tif (loadingScreen) {\n\t\t\t\t\t\tloadingScreen.classList.add('hide');\n\t\t\t\t\t\t// Remove from DOM after transition completes\n\t\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\t\tloadingScreen.parentNode.removeChild(loadingScreen);\n\t\t\t\t\t\t}, 500);\n\t\t\t\t\t}\n\t\t\t\t}, 200);\n\t\t\t});\n\t\t</script>\n\t</body>\n</html>",
		error: ({ status, message }) => "<!doctype html>\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<title>" + message + "</title>\n\n\t\t<style>\n\t\t\tbody {\n\t\t\t\t--bg: white;\n\t\t\t\t--fg: #222;\n\t\t\t\t--divider: #ccc;\n\t\t\t\tbackground: var(--bg);\n\t\t\t\tcolor: var(--fg);\n\t\t\t\tfont-family:\n\t\t\t\t\tsystem-ui,\n\t\t\t\t\t-apple-system,\n\t\t\t\t\tBlinkMacSystemFont,\n\t\t\t\t\t'Segoe UI',\n\t\t\t\t\tRoboto,\n\t\t\t\t\tOxygen,\n\t\t\t\t\tUbuntu,\n\t\t\t\t\tCantarell,\n\t\t\t\t\t'Open Sans',\n\t\t\t\t\t'Helvetica Neue',\n\t\t\t\t\tsans-serif;\n\t\t\t\tdisplay: flex;\n\t\t\t\talign-items: center;\n\t\t\t\tjustify-content: center;\n\t\t\t\theight: 100vh;\n\t\t\t\tmargin: 0;\n\t\t\t}\n\n\t\t\t.error {\n\t\t\t\tdisplay: flex;\n\t\t\t\talign-items: center;\n\t\t\t\tmax-width: 32rem;\n\t\t\t\tmargin: 0 1rem;\n\t\t\t}\n\n\t\t\t.status {\n\t\t\t\tfont-weight: 200;\n\t\t\t\tfont-size: 3rem;\n\t\t\t\tline-height: 1;\n\t\t\t\tposition: relative;\n\t\t\t\ttop: -0.05rem;\n\t\t\t}\n\n\t\t\t.message {\n\t\t\t\tborder-left: 1px solid var(--divider);\n\t\t\t\tpadding: 0 0 0 1rem;\n\t\t\t\tmargin: 0 0 0 1rem;\n\t\t\t\tmin-height: 2.5rem;\n\t\t\t\tdisplay: flex;\n\t\t\t\talign-items: center;\n\t\t\t}\n\n\t\t\t.message h1 {\n\t\t\t\tfont-weight: 400;\n\t\t\t\tfont-size: 1em;\n\t\t\t\tmargin: 0;\n\t\t\t}\n\n\t\t\t@media (prefers-color-scheme: dark) {\n\t\t\t\tbody {\n\t\t\t\t\t--bg: #222;\n\t\t\t\t\t--fg: #ddd;\n\t\t\t\t\t--divider: #666;\n\t\t\t\t}\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<div class=\"error\">\n\t\t\t<span class=\"status\">" + status + "</span>\n\t\t\t<div class=\"message\">\n\t\t\t\t<h1>" + message + "</h1>\n\t\t\t</div>\n\t\t</div>\n\t</body>\n</html>\n"
	},
	version_hash: "1na8dnh"
};

export async function get_hooks() {
	let handle;
	let handleFetch;
	let handleError;
	let init;
	

	let reroute;
	let transport;
	

	return {
		handle,
		handleFetch,
		handleError,
		init,
		reroute,
		transport
	};
}

export { set_assets, set_building, set_manifest, set_prerendering, set_private_env, set_public_env, set_read_implementation, set_safe_public_env };
